package com.reddate.tradetrust.blockchain.contract;

import io.reactivex.Flowable;
import io.reactivex.functions.Function;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicBytes;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.4.1.
 */
@SuppressWarnings("rawtypes")
public class TradeTrustERC721 extends Contract {
    public static final String BINARY = "60806040523480156200001157600080fd5b5060405162003fde38038062003fde8339810160408190526200003491620003e1565b81818181604051620000469062000260565b604051809103906000f08015801562000063573d6000803e3d6000fd5b50600080546001600160a01b0319166001600160a01b03929092169190911790558151620000999060019060208501906200026e565b508051620000af9060029060208401906200026e565b50620000c191506000905033620000f7565b620000ed7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a633620000f7565b5050505062000488565b6200010e82826200013a60201b62000fcd1760201c565b60008281526008602090815260409091206200013591839062000fdb6200014a821b17901c565b505050565b6200014682826200016a565b5050565b600062000161836001600160a01b0384166200020e565b90505b92915050565b60008281526007602090815260408083206001600160a01b038516845290915290205460ff16620001465760008281526007602090815260408083206001600160a01b03851684529091529020805460ff19166001179055620001ca3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000818152600183016020526040812054620002575750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915562000164565b50600062000164565b61147e8062002b6083390190565b8280546200027c906200044b565b90600052602060002090601f016020900481019282620002a05760008555620002eb565b82601f10620002bb57805160ff1916838001178555620002eb565b82800160010185558215620002eb579182015b82811115620002eb578251825591602001919060010190620002ce565b50620002f9929150620002fd565b5090565b5b80821115620002f95760008155600101620002fe565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200033c57600080fd5b81516001600160401b038082111562000359576200035962000314565b604051601f8301601f19908116603f0116810190828211818310171562000384576200038462000314565b81604052838152602092508683858801011115620003a157600080fd5b600091505b83821015620003c55785820183015181830184015290820190620003a6565b83821115620003d75760008385830101525b9695505050505050565b60008060408385031215620003f557600080fd5b82516001600160401b03808211156200040d57600080fd5b6200041b868387016200032a565b935060208501519150808211156200043257600080fd5b5062000441858286016200032a565b9150509250929050565b600181811c908216806200046057607f821691505b602082108114156200048257634e487b7160e01b600052602260045260246000fd5b50919050565b6126c880620004986000396000f3fe608060405234801561001057600080fd5b50600436106102065760003560e01c80639010d07c1161011a578063aa271e1a116100ad578063ca15c8731161007c578063ca15c87314610479578063d53913931461048c578063d547741f146104a1578063e985e9c5146104b4578063fcd7c1df146104f057600080fd5b8063aa271e1a1461042d578063b88d4fde14610440578063c87b56dd14610453578063c9c96c891461046657600080fd5b806398650275116100e957806398650275146103f7578063a1448194146103ff578063a217fddf14610412578063a22cb4651461041a57600080fd5b80639010d07c146103b657806391d14854146103c957806395d89b41146103dc578063983b2d56146103e457600080fd5b80632f2ff15d1161019d5780636352211e1161016c5780636352211e1461035757806370a082311461036a57806382a96dce1461037d5780638832e6e3146103905780638a7d124b146103a357600080fd5b80632f2ff15d1461030b57806336568abe1461031e57806340c10f191461033157806342842e0e1461034457600080fd5b8063150b7a02116101d9578063150b7a02146102885780631c786e5c146102b457806323b872dd146102c7578063248a9ca3146102da57600080fd5b806301ffc9a71461020b57806306fdde0314610233578063081812fc14610248578063095ea7b314610273575b600080fd5b61021e610219366004611fb4565b610503565b60405190151581526020015b60405180910390f35b61023b610549565b60405161022a9190612029565b61025b61025636600461203c565b6105db565b6040516001600160a01b03909116815260200161022a565b61028661028136600461206c565b610668565b005b61029b610296366004612139565b61077e565b6040516001600160e01b0319909116815260200161022a565b61025b6102c23660046121a1565b6107de565b6102866102d53660046121a1565b6108f6565b6102fd6102e836600461203c565b60009081526007602052604090206001015490565b60405190815260200161022a565b6102866103193660046121dd565b610927565b61028661032c3660046121dd565b610949565b61021e61033f36600461206c565b61096b565b6102866103523660046121a1565b6109a5565b61025b61036536600461203c565b6109c0565b6102fd610378366004612209565b610a37565b61025b61038b3660046121a1565b610abe565b61021e61039e366004612224565b610b60565b6102866103b136600461203c565b610b9c565b61025b6103c436600461227b565b610c7a565b61021e6103d73660046121dd565b610c99565b61023b610cc4565b6102866103f2366004612209565b610cd3565b610286610cdc565b61021e61040d36600461206c565b610d53565b6102fd600081565b61028661042836600461229d565b610d84565b61021e61043b366004612209565b610e49565b61028661044e366004612139565b610e63565b61023b61046136600461203c565b610ec8565b60005461025b906001600160a01b031681565b6102fd61048736600461203c565b610f9f565b6102fd60008051602061267383398151915281565b6102866104af3660046121dd565b610fb6565b61021e6104c23660046122d9565b6001600160a01b03918216600090815260066020908152604080832093909416825291909152205460ff1690565b61025b6104fe366004612303565b610fc0565b60006001600160e01b0319821663fcd7c1df60e01b148061053457506001600160e01b031982166314ac11d960e01b145b80610543575061054382610ff0565b92915050565b60606001805461055890612346565b80601f016020809104026020016040519081016040528092919081815260200182805461058490612346565b80156105d15780601f106105a6576101008083540402835291602001916105d1565b820191906000526020600020905b8154815290600101906020018083116105b457829003601f168201915b5050505050905090565b60006105e68261103f565b61064c5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600560205260409020546001600160a01b031690565b6000610673826109c0565b9050806001600160a01b0316836001600160a01b031614156106e15760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608401610643565b336001600160a01b03821614806106fd57506106fd81336104c2565b61076f5760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006064820152608401610643565b610779838361105c565b505050565b600082846001600160a01b0316866001600160a01b03167f5343d39c46825e39cfee854256354ed1b3837af99997a3242ae29e831889773c856040516107c49190612029565b60405180910390a450630a85bd0160e11b5b949350505050565b60006107e933610e49565b6108055760405162461bcd60e51b815260040161064390612381565b61080e8261103f565b6108665760405162461bcd60e51b815260206004820152602360248201527f546f6b656e52656769737472793a20546f6b656e20646f6573206e6f742065786044820152621a5cdd60ea1b6064820152608401610643565b30610870836109c0565b6001600160a01b0316146108dc5760405162461bcd60e51b815260206004820152602d60248201527f546f6b656e52656769737472793a20546f6b656e206973206e6f74206f776e6560448201526c6420627920726567697374727960981b6064820152608401610643565b60006108e93086866110ca565b90506107d63082856111aa565b61090033826111c5565b61091c5760405162461bcd60e51b8152600401610643906123d1565b6107798383836112ab565b610931828261144b565b60008281526008602052604090206107799082610fdb565b6109538282611471565b600082815260086020526040902061077990826114eb565b600061097633610e49565b6109925760405162461bcd60e51b815260040161064390612381565b61099c8383611500565b50600192915050565b61077983838360405180602001604052806000815250610e63565b6000818152600360205260408120546001600160a01b0316806105435760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b6064820152608401610643565b60006001600160a01b038216610aa25760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b6064820152608401610643565b506001600160a01b031660009081526004602052604090205490565b6000610ac933610e49565b610ae55760405162461bcd60e51b815260040161064390612381565b610aee8261103f565b15610b475760405162461bcd60e51b815260206004820152602360248201527f546f6b656e52656769737472793a20546f6b656e20616c72656164792065786960448201526273747360e81b6064820152608401610643565b6000610b543086866110ca565b90506107d68184611633565b6000610b6b33610e49565b610b875760405162461bcd60e51b815260040161064390612381565b610b92848484611649565b5060019392505050565b610ba533610e49565b610bc15760405162461bcd60e51b815260040161064390612381565b30610bcb826109c0565b6001600160a01b031614610c375760405162461bcd60e51b815260206004820152602d60248201527f546f6b656e52656769737472793a20546f6b656e20686173206e6f742062656560448201526c1b881cdd5c9c995b99195c9959609a1b6064820152608401610643565b60405181907ff20b2822e5b23bbd8f6a8403d33b35d15c70c1b08311f66ab320995806ebbcf090600090a2610c77610c6e826109c0565b61dead836111aa565b50565b6000828152600860205260408120610c92908361167c565b9392505050565b60009182526007602090815260408084206001600160a01b0393909316845291905290205460ff1690565b60606002805461055890612346565b610c7781611688565b306336568abe600080516020612673833981519152336040516001600160e01b031960e085901b16815260048101929092526001600160a01b03166024820152604401600060405180830381600087803b158015610d3957600080fd5b505af1158015610d4d573d6000803e3d6000fd5b50505050565b6000610d5e33610e49565b610d7a5760405162461bcd60e51b815260040161064390612381565b61099c8383611633565b6001600160a01b038216331415610ddd5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610643565b3360008181526006602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b600061054360008051602061267383398151915283610c99565b6040805133815290517fb8a00d6d8ca1be30bfec34d8f97e55f0f0fd9eeb7fb46e030516363d4cfe1ad69181900360200190a1610ea033836111c5565b610ebc5760405162461bcd60e51b8152600401610643906123d1565b610d4d8484848461172c565b6060610ed38261103f565b610f375760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b6064820152608401610643565b6000610f4e60408051602081019091526000815290565b90506000815111610f6e5760405180602001604052806000815250610c92565b80610f788461175f565b604051602001610f89929190612422565b6040516020818303038152906040529392505050565b60008181526008602052604081206105439061185d565b6109538282611867565b60006107d68484846110ca565b610fd7828261188d565b5050565b6000610c92836001600160a01b038416611913565b60006001600160e01b031982166380ac58cd60e01b148061102157506001600160e01b0319821663aa79313960e01b145b80611030575061103082611962565b806105435750610543826119b2565b6000908152600360205260409020546001600160a01b0316151590565b600081815260056020526040902080546001600160a01b0319166001600160a01b0384169081179091558190611091826109c0565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000805481906110e2906001600160a01b03166119d7565b604051637c643b2f60e11b81526001600160a01b038781166004830152868116602483015285811660448301523060648301529192509082169063f8c8765e90608401600060405180830381600087803b15801561113f57600080fd5b505af1158015611153573d6000803e3d6000fd5b5050604080516001600160a01b0388811682528781166020830152808a169450851692507fe2f3f566784bdc646f1c93b8081e3a6ba18cf31fb9f2540aa0e2988954dffccb910160405180910390a3949350505050565b61077983838360405180602001604052806000815250611a74565b60006111d08261103f565b6112315760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610643565b600061123c836109c0565b9050806001600160a01b0316846001600160a01b031614806112775750836001600160a01b031661126c846105db565b6001600160a01b0316145b806107d657506001600160a01b0380821660009081526006602090815260408083209388168352929052205460ff166107d6565b826001600160a01b03166112be826109c0565b6001600160a01b0316146113265760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b6064820152608401610643565b6001600160a01b0382166113885760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610643565b61139360008261105c565b6001600160a01b03831660009081526004602052604081208054600192906113bc908490612467565b90915550506001600160a01b03821660009081526004602052604081208054600192906113ea90849061247e565b909155505060008181526003602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6000828152600760205260409020600101546114678133611ad5565b610779838361188d565b6001600160a01b03811633146114e15760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610643565b610fd78282611b39565b6000610c92836001600160a01b038416611ba0565b6001600160a01b0382166115565760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610643565b61155f8161103f565b156115ac5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610643565b6001600160a01b03821660009081526004602052604081208054600192906115d590849061247e565b909155505060008181526003602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b610fd78282604051806020016040528060008152505b6116538383611500565b6116606000848484611c93565b6107795760405162461bcd60e51b815260040161064390612496565b6000610c928383611d8e565b604051632f2ff15d60e01b815260008051602061267383398151915260048201526001600160a01b03821660248201523090632f2ff15d90604401600060405180830381600087803b1580156116dd57600080fd5b505af11580156116f1573d6000803e3d6000fd5b50506040516001600160a01b03841692507f6ae172837ea30b801fbfcdd4108aa1d5bf8ff775444fd70256b44e6bf3dfc3f69150600090a250565b6117378484846112ab565b61174384848484611c93565b610d4d5760405162461bcd60e51b815260040161064390612496565b6060816117835750506040805180820190915260018152600360fc1b602082015290565b8160005b81156117ad5780611797816124e8565b91506117a69050600a83612519565b9150611787565b60008167ffffffffffffffff8111156117c8576117c8612096565b6040519080825280601f01601f1916602001820160405280156117f2576020820181803683370190505b5090505b84156107d657611807600183612467565b9150611814600a8661252d565b61181f90603061247e565b60f81b81838151811061183457611834612541565b60200101906001600160f81b031916908160001a905350611856600a86612519565b94506117f6565b6000610543825490565b6000828152600760205260409020600101546118838133611ad5565b6107798383611b39565b6118978282610c99565b610fd75760008281526007602090815260408083206001600160a01b03851684529091529020805460ff191660011790556118cf3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b600081815260018301602052604081205461195a57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610543565b506000610543565b60006001600160e01b031982166380ac58cd60e01b148061199357506001600160e01b03198216635b5e139f60e01b145b8061054357506301ffc9a760e01b6001600160e01b0319831614610543565b60006001600160e01b0319821663aa79313960e01b1480610543575061054382611db8565b6000604051733d602d80600a3d3981f3363d3d373d3d3d363d7360601b81528260601b60148201526e5af43d82803e903d91602b57fd5bf360881b60288201526037816000f09150506001600160a01b038116611a6f5760405162461bcd60e51b8152602060048201526016602482015275115490cc4c4d8dce8818dc99585d194819985a5b195960521b6044820152606401610643565b919050565b604051635c46a7ef60e11b8152309063b88d4fde90611a9d908790879087908790600401612557565b600060405180830381600087803b158015611ab757600080fd5b505af1158015611acb573d6000803e3d6000fd5b5050505050505050565b611adf8282610c99565b610fd757611af7816001600160a01b03166014611ddd565b611b02836020611ddd565b604051602001611b13929190612594565b60408051601f198184030181529082905262461bcd60e51b825261064391600401612029565b611b438282610c99565b15610fd75760008281526007602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60008181526001830160205260408120548015611c89576000611bc4600183612467565b8554909150600090611bd890600190612467565b9050818114611c3d576000866000018281548110611bf857611bf8612541565b9060005260206000200154905080876000018481548110611c1b57611c1b612541565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080611c4e57611c4e612609565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610543565b6000915050610543565b60006001600160a01b0384163b15611d8657604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290611cd7903390899088908890600401612557565b6020604051808303816000875af1925050508015611d12575060408051601f3d908101601f19168201909252611d0f9181019061261f565b60015b611d6c573d808015611d40576040519150601f19603f3d011682016040523d82523d6000602084013e611d45565b606091505b508051611d645760405162461bcd60e51b815260040161064390612496565b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490506107d6565b5060016107d6565b6000826000018281548110611da557611da5612541565b9060005260206000200154905092915050565b60006001600160e01b03198216635a05180f60e01b1480610543575061054382611f79565b60606000611dec83600261263c565b611df790600261247e565b67ffffffffffffffff811115611e0f57611e0f612096565b6040519080825280601f01601f191660200182016040528015611e39576020820181803683370190505b509050600360fc1b81600081518110611e5457611e54612541565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110611e8357611e83612541565b60200101906001600160f81b031916908160001a9053506000611ea784600261263c565b611eb290600161247e565b90505b6001811115611f2a576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110611ee657611ee6612541565b1a60f81b828281518110611efc57611efc612541565b60200101906001600160f81b031916908160001a90535060049490941c93611f238161265b565b9050611eb5565b508315610c925760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610643565b60006001600160e01b03198216637965db0b60e01b1480610543575061054382611962565b6001600160e01b031981168114610c7757600080fd5b600060208284031215611fc657600080fd5b8135610c9281611f9e565b60005b83811015611fec578181015183820152602001611fd4565b83811115610d4d5750506000910152565b60008151808452612015816020860160208601611fd1565b601f01601f19169290920160200192915050565b602081526000610c926020830184611ffd565b60006020828403121561204e57600080fd5b5035919050565b80356001600160a01b0381168114611a6f57600080fd5b6000806040838503121561207f57600080fd5b61208883612055565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126120bd57600080fd5b813567ffffffffffffffff808211156120d8576120d8612096565b604051601f8301601f19908116603f0116810190828211818310171561210057612100612096565b8160405283815286602085880101111561211957600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000806000806080858703121561214f57600080fd5b61215885612055565b935061216660208601612055565b925060408501359150606085013567ffffffffffffffff81111561218957600080fd5b612195878288016120ac565b91505092959194509250565b6000806000606084860312156121b657600080fd5b6121bf84612055565b92506121cd60208501612055565b9150604084013590509250925092565b600080604083850312156121f057600080fd5b8235915061220060208401612055565b90509250929050565b60006020828403121561221b57600080fd5b610c9282612055565b60008060006060848603121561223957600080fd5b61224284612055565b925060208401359150604084013567ffffffffffffffff81111561226557600080fd5b612271868287016120ac565b9150509250925092565b6000806040838503121561228e57600080fd5b50508035926020909101359150565b600080604083850312156122b057600080fd5b6122b983612055565b9150602083013580151581146122ce57600080fd5b809150509250929050565b600080604083850312156122ec57600080fd5b6122f583612055565b915061220060208401612055565b60008060006060848603121561231857600080fd5b61232184612055565b925061232f60208501612055565b915061233d60408501612055565b90509250925092565b600181811c9082168061235a57607f821691505b6020821081141561237b57634e487b7160e01b600052602260045260246000fd5b50919050565b60208082526030908201527f4d696e746572526f6c653a2063616c6c657220646f6573206e6f74206861766560408201526f20746865204d696e74657220726f6c6560801b606082015260800190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b60008351612434818460208801611fd1565b835190830190612448818360208801611fd1565b01949350505050565b634e487b7160e01b600052601160045260246000fd5b60008282101561247957612479612451565b500390565b6000821982111561249157612491612451565b500190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b60006000198214156124fc576124fc612451565b5060010190565b634e487b7160e01b600052601260045260246000fd5b60008261252857612528612503565b500490565b60008261253c5761253c612503565b500690565b634e487b7160e01b600052603260045260246000fd5b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061258a90830184611ffd565b9695505050505050565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516125cc816017850160208801611fd1565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516125fd816028840160208801611fd1565b01602801949350505050565b634e487b7160e01b600052603160045260246000fd5b60006020828403121561263157600080fd5b8151610c9281611f9e565b600081600019048311821515161561265657612656612451565b500290565b60008161266a5761266a612451565b50600019019056fe9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6a2646970667358221220366dceeb6ebad58a94fe60f06fe4419813f59582dfe35f690a12946afed13d7f64736f6c634300080c0033608060405234801561001057600080fd5b5061145e806100206000396000f3fe608060405234801561001057600080fd5b506004361061010b5760003560e01c806338af3eed116100a2578063b71c47a211610071578063b71c47a21461025e578063d4b5661014610266578063e366ab3014610279578063e534155d1461028c578063f8c8765e146102a557600080fd5b806338af3eed146102125780635a87db751461022557806374bbb350146102385780639d23c4c71461024b57600080fd5b80631fe2b08a116100de5780631fe2b08a146101b4578063200d2ed2146101c757806324822514146101e8578063325689f9146101ff57600080fd5b806301ffc9a71461011057806303f0736d146101485780630cb258b71461015d578063150b7a0214610188575b600080fd5b61013361011e36600461104e565b6001600160e01b03191662b3b74f60e51b1490565b60405190151581526020015b60405180910390f35b61015b610156366004611094565b6102b8565b005b600654610170906001600160a01b031681565b6040516001600160a01b03909116815260200161013f565b61019b6101963660046110b1565b610437565b6040516001600160e01b0319909116815260200161013f565b600754610170906001600160a01b031681565b6001546101db90600160a01b900460ff1681565b60405161013f9190611166565b6101f160035481565b60405190815260200161013f565b600454610170906001600160a01b031681565b600154610170906001600160a01b031681565b61015b610233366004611094565b6105cc565b61015b61024636600461118e565b6106ee565b600254610170906001600160a01b031681565b61015b610a10565b600554610170906001600160a01b031681565b61015b61028736600461118e565b610b61565b600054610170906201000090046001600160a01b031681565b61015b6102b33660046111c7565b610d31565b6003546102e05760405162461bcd60e51b81526004016102d790611223565b60405180910390fd5b60018054600160a01b900460ff1660028111156102ff576102ff611150565b1461031c5760405162461bcd60e51b81526004016102d79061126f565b6002546003546040516331a9108f60e11b8152600481019190915230916001600160a01b031690636352211e90602401602060405180830381865afa158015610369573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061038d91906112b2565b6001600160a01b0316146103b35760405162461bcd60e51b81526004016102d7906112cf565b6103bb610e34565b6103d75760405162461bcd60e51b81526004016102d79061131e565b6001546003546040516001600160a01b03808516931691907fd728b6f1bea0a163413b81fbf7301d4a193de3b5565105255108cdec8b2acddb90600090a4600780546001600160a01b0319166001600160a01b0392909216919091179055565b600080600154600160a01b900460ff16600281111561045857610458611150565b146104b85760405162461bcd60e51b815260206004820152602a60248201527f5469746c65457363726f773a20436f6e747261637420686173206265656e2075604482015269736564206265666f726560b01b60648201526084016102d7565b6002546001600160a01b0316336001600160a01b0316146105515760405162461bcd60e51b815260206004820152604760248201527f5469746c65457363726f773a204f6e6c7920746f6b656e732066726f6d20707260448201527f65646566696e656420746f6b656e2072656769737472792063616e206265206160648201526618d8d95c1d195960ca1b608482015260a4016102d7565b600384905560405184906001600160a01b0387169033907f01fcbb5289f65a5306cb0d0c6a79f53f0c1c0b245a042e3565e30c0e6104e24090600090a450506001805460ff60a01b1916600160a01b179055507f150b7a023d4804d13e8c85fb27262cb750cf6ba9f9dd3bb30d90f482ceeb4b1f9392505050565b6003546105eb5760405162461bcd60e51b81526004016102d790611223565b60018054600160a01b900460ff16600281111561060a5761060a611150565b146106275760405162461bcd60e51b81526004016102d79061126f565b6002546003546040516331a9108f60e11b8152600481019190915230916001600160a01b031690636352211e90602401602060405180830381865afa158015610674573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061069891906112b2565b6001600160a01b0316146106be5760405162461bcd60e51b81526004016102d7906112cf565b6106c6610e54565b6106e25760405162461bcd60e51b81526004016102d790611386565b6106eb81610e6d565b50565b60035461070d5760405162461bcd60e51b81526004016102d790611223565b60018054600160a01b900460ff16600281111561072c5761072c611150565b146107495760405162461bcd60e51b81526004016102d79061126f565b6002546003546040516331a9108f60e11b8152600481019190915230916001600160a01b031690636352211e90602401602060405180830381865afa158015610796573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107ba91906112b2565b6001600160a01b0316146107e05760405162461bcd60e51b81526004016102d7906112cf565b6107e8610e54565b6108045760405162461bcd60e51b81526004016102d790611386565b81816001600160a01b03821661082c5760405162461bcd60e51b81526004016102d7906113d9565b6001600160a01b0381166108525760405162461bcd60e51b81526004016102d7906113d9565b6001546000546201000090046001600160a01b03908116911614610976576005546001600160a01b038381169116146108f35760405162461bcd60e51b815260206004820152603d60248201527f5469746c65457363726f773a2042656e656669636961727920686173206e6f7460448201527f206265656e20656e646f727365642062792062656e656669636961727900000060648201526084016102d7565b6006546001600160a01b038281169116146109765760405162461bcd60e51b815260206004820152603860248201527f5469746c65457363726f773a20486f6c64657220686173206e6f74206265656e60448201527f20656e646f727365642062792062656e6566696369617279000000000000000060648201526084016102d7565b6004805460025460405163fcd7c1df60e01b81526001600160a01b03918216938101939093528681166024840152858116604484015260009291169063fcd7c1df906064016020604051808303816000875af11580156109da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109fe91906112b2565b9050610a0981610f3e565b5050505050565b600354610a2f5760405162461bcd60e51b81526004016102d790611223565b60018054600160a01b900460ff166002811115610a4e57610a4e611150565b14610a6b5760405162461bcd60e51b81526004016102d79061126f565b6002546003546040516331a9108f60e11b8152600481019190915230916001600160a01b031690636352211e90602401602060405180830381865afa158015610ab8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610adc91906112b2565b6001600160a01b031614610b025760405162461bcd60e51b81526004016102d7906112cf565b610b0a610e34565b610b265760405162461bcd60e51b81526004016102d79061131e565b610b2e610e54565b610b4a5760405162461bcd60e51b81526004016102d790611386565b600254610b5f906001600160a01b0316610f3e565b565b610b69610e34565b610b855760405162461bcd60e51b81526004016102d79061131e565b600354610ba45760405162461bcd60e51b81526004016102d790611223565b60018054600160a01b900460ff166002811115610bc357610bc3611150565b14610be05760405162461bcd60e51b81526004016102d79061126f565b6002546003546040516331a9108f60e11b8152600481019190915230916001600160a01b031690636352211e90602401602060405180830381865afa158015610c2d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c5191906112b2565b6001600160a01b031614610c775760405162461bcd60e51b81526004016102d7906112cf565b6001600160a01b038216610c9d5760405162461bcd60e51b81526004016102d7906113d9565b6001600160a01b038116610cc35760405162461bcd60e51b81526004016102d7906113d9565b806001600160a01b0316826001600160a01b03167f69e959981ba8324fe4ac2cc8441dfcac87573494c77536baaf7acee6c51b7b6d60405160405180910390a3600580546001600160a01b039384166001600160a01b03199182161790915560068054929093169116179055565b600054610100900460ff1680610d4a575060005460ff16155b610dad5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016102d7565b600054610100900460ff16158015610dcf576000805461ffff19166101011790555b610dd883610ff9565b60018054600280546001600160a01b038981166001600160a01b0319928316179092556004805487841692169190911790556001600160a81b03199091169086161790558015610a09576000805461ff00191690555050505050565b6001546000906001600160a01b0316335b6001600160a01b031614905090565b600080546201000090046001600160a01b031633610e45565b6001600160a01b038116610ed55760405162461bcd60e51b815260206004820152602960248201527f486173486f6c6465723a206e657720686f6c64657220697320746865207a65726044820152686f206164647265737360b81b60648201526084016102d7565b600080546040516001600160a01b03808516936201000090930416917f076c2af751a37d3871addf9a6fdedbaf3827fb030bf1d04c43a1421420fcc98791a3600080546001600160a01b03909216620100000262010000600160b01b0319909216919091179055565b6001805460ff60a01b1916600160a11b1790556003546002546040516001600160a01b038481169216907fcf31cbde15ae9b0bfff5442830acd2764cad8da3394f189aa10c5a932e5b295590600090a4600254600354604051632142170760e11b81523060048201526001600160a01b03848116602483015260448201929092529116906342842e0e90606401600060405180830381600087803b158015610fe557600080fd5b505af1158015610a09573d6000803e3d6000fd5b6000805462010000600160b01b031916620100006001600160a01b0384169081029190911782556040519091907f076c2af751a37d3871addf9a6fdedbaf3827fb030bf1d04c43a1421420fcc987908290a350565b60006020828403121561106057600080fd5b81356001600160e01b03198116811461107857600080fd5b9392505050565b6001600160a01b03811681146106eb57600080fd5b6000602082840312156110a657600080fd5b81356110788161107f565b6000806000806000608086880312156110c957600080fd5b85356110d48161107f565b945060208601356110e48161107f565b935060408601359250606086013567ffffffffffffffff8082111561110857600080fd5b818801915088601f83011261111c57600080fd5b81358181111561112b57600080fd5b89602082850101111561113d57600080fd5b9699959850939650602001949392505050565b634e487b7160e01b600052602160045260246000fd5b602081016003831061118857634e487b7160e01b600052602160045260246000fd5b91905290565b600080604083850312156111a157600080fd5b82356111ac8161107f565b915060208301356111bc8161107f565b809150509250929050565b600080600080608085870312156111dd57600080fd5b84356111e88161107f565b935060208501356111f88161107f565b925060408501356112088161107f565b915060608501356112188161107f565b939692955090935050565b6020808252602c908201527f5469746c65457363726f773a20436f6e7472616374206973206e6f7420686f6c60408201526b3234b7339030903a37b5b2b760a11b606082015260800190565b60208082526023908201527f5469746c65457363726f773a20436f6e7472616374206973206e6f7420696e2060408201526275736560e81b606082015260800190565b6000602082840312156112c457600080fd5b81516110788161107f565b6020808252602f908201527f5469746c65457363726f773a20436f6e7472616374206973206e6f742074686560408201526e1037bbb732b91037b3103a37b5b2b760891b606082015260800190565b60208082526042908201527f4861734e616d656442656e65666963696172793a206f6e6c792074686520626560408201527f6e6566696369617279206d617920696e766f6b6520746869732066756e63746960608201526137b760f11b608082015260a00190565b60208082526033908201527f486173486f6c6465723a206f6e6c792074686520686f6c646572206d61792069604082015272373b37b5b2903a3434b990333ab731ba34b7b760691b606082015260800190565b6020808252602f908201527f5469746c65457363726f773a205472616e7366657272696e6720746f2030783060408201526e081a5cc81b9bdd08185b1b1bddd959608a1b60608201526080019056fea264697066735822122055e92ecb55b3cc12b9a1b19af2b88a078242867c862b134a7fbb078c12638bd464736f6c634300080c0033";

    public static final String FUNC_DEFAULT_ADMIN_ROLE = "DEFAULT_ADMIN_ROLE";

    public static final String FUNC_MINTER_ROLE = "MINTER_ROLE";

    public static final String FUNC_ADDMINTER = "addMinter";

    public static final String FUNC_APPROVE = "approve";

    public static final String FUNC_BALANCEOF = "balanceOf";

    public static final String FUNC_DEPLOYNEWTITLEESCROW = "deployNewTitleEscrow";

    public static final String FUNC_DESTROYTOKEN = "destroyToken";

    public static final String FUNC_GETAPPROVED = "getApproved";

    public static final String FUNC_GETROLEADMIN = "getRoleAdmin";

    public static final String FUNC_GETROLEMEMBER = "getRoleMember";

    public static final String FUNC_GETROLEMEMBERCOUNT = "getRoleMemberCount";

    public static final String FUNC_GRANTROLE = "grantRole";

    public static final String FUNC_HASROLE = "hasRole";

    public static final String FUNC_ISAPPROVEDFORALL = "isApprovedForAll";

    public static final String FUNC_ISMINTER = "isMinter";

    public static final String FUNC_MINT = "mint";

    public static final String FUNC_MINTTITLE = "mintTitle";

    public static final String FUNC_NAME = "name";

    public static final String FUNC_ONERC721RECEIVED = "onERC721Received";

    public static final String FUNC_OWNEROF = "ownerOf";

    public static final String FUNC_RENOUNCEMINTER = "renounceMinter";

    public static final String FUNC_RENOUNCEROLE = "renounceRole";

    public static final String FUNC_RESTORETITLE = "restoreTitle";

    public static final String FUNC_REVOKEROLE = "revokeRole";

    public static final String FUNC_safeMint = "safeMint";

    public static final String FUNC_safeTransferFrom = "safeTransferFrom";

    public static final String FUNC_SETAPPROVALFORALL = "setApprovalForAll";

    public static final String FUNC_SUPPORTSINTERFACE = "supportsInterface";

    public static final String FUNC_SYMBOL = "symbol";

    public static final String FUNC_TITLEESCROWIMPLEMENTATION = "titleEscrowImplementation";

    public static final String FUNC_TOKENURI = "tokenURI";

    public static final String FUNC_TRANSFERFROM = "transferFrom";

    public static final Event APPROVAL_EVENT = new Event("Approval", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}));
    ;

    public static final Event APPROVALFORALL_EVENT = new Event("ApprovalForAll", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Bool>() {}));
    ;

    public static final Event LOG_EVENT = new Event("Log", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    ;

    public static final Event MINTERADDED_EVENT = new Event("MinterAdded", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}));
    ;

    public static final Event MINTERREMOVED_EVENT = new Event("MinterRemoved", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}));
    ;

    public static final Event ROLEADMINCHANGED_EVENT = new Event("RoleAdminChanged", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {}, new TypeReference<Bytes32>(true) {}, new TypeReference<Bytes32>(true) {}));
    ;

    public static final Event ROLEGRANTED_EVENT = new Event("RoleGranted", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event ROLEREVOKED_EVENT = new Event("RoleRevoked", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event TITLEESCROWDEPLOYED_EVENT = new Event("TitleEscrowDeployed", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event TOKENBURNT_EVENT = new Event("TokenBurnt", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>(true) {}));
    ;

    public static final Event TOKENRECEIVED_EVENT = new Event("TokenReceived", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}, new TypeReference<DynamicBytes>() {}));
    ;

    public static final Event TRANSFER_EVENT = new Event("Transfer", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}));
    ;

    @Deprecated
    protected TradeTrustERC721(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected TradeTrustERC721(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected TradeTrustERC721(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected TradeTrustERC721(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public List<ApprovalEventResponse> getApprovalEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(APPROVAL_EVENT, transactionReceipt);
        ArrayList<ApprovalEventResponse> responses = new ArrayList<ApprovalEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            ApprovalEventResponse typedResponse = new ApprovalEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.approved = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ApprovalEventResponse> approvalEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ApprovalEventResponse>() {
            @Override
            public ApprovalEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(APPROVAL_EVENT, log);
                ApprovalEventResponse typedResponse = new ApprovalEventResponse();
                typedResponse.log = log;
                typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.approved = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ApprovalEventResponse> approvalEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVAL_EVENT));
        return approvalEventFlowable(filter);
    }

    public List<ApprovalForAllEventResponse> getApprovalForAllEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(APPROVALFORALL_EVENT, transactionReceipt);
        ArrayList<ApprovalForAllEventResponse> responses = new ArrayList<ApprovalForAllEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            ApprovalForAllEventResponse typedResponse = new ApprovalForAllEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.operator = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.approved = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ApprovalForAllEventResponse> approvalForAllEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ApprovalForAllEventResponse>() {
            @Override
            public ApprovalForAllEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(APPROVALFORALL_EVENT, log);
                ApprovalForAllEventResponse typedResponse = new ApprovalForAllEventResponse();
                typedResponse.log = log;
                typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.operator = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.approved = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ApprovalForAllEventResponse> approvalForAllEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVALFORALL_EVENT));
        return approvalForAllEventFlowable(filter);
    }

    public List<LogEventResponse> getLogEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(LOG_EVENT, transactionReceipt);
        ArrayList<LogEventResponse> responses = new ArrayList<LogEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            LogEventResponse typedResponse = new LogEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<LogEventResponse> logEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, LogEventResponse>() {
            @Override
            public LogEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(LOG_EVENT, log);
                LogEventResponse typedResponse = new LogEventResponse();
                typedResponse.log = log;
                typedResponse.owner = (String) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<LogEventResponse> logEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(LOG_EVENT));
        return logEventFlowable(filter);
    }

    public List<MinterAddedEventResponse> getMinterAddedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(MINTERADDED_EVENT, transactionReceipt);
        ArrayList<MinterAddedEventResponse> responses = new ArrayList<MinterAddedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            MinterAddedEventResponse typedResponse = new MinterAddedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.account = (String) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<MinterAddedEventResponse> minterAddedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, MinterAddedEventResponse>() {
            @Override
            public MinterAddedEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(MINTERADDED_EVENT, log);
                MinterAddedEventResponse typedResponse = new MinterAddedEventResponse();
                typedResponse.log = log;
                typedResponse.account = (String) eventValues.getIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<MinterAddedEventResponse> minterAddedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(MINTERADDED_EVENT));
        return minterAddedEventFlowable(filter);
    }

    public List<MinterRemovedEventResponse> getMinterRemovedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(MINTERREMOVED_EVENT, transactionReceipt);
        ArrayList<MinterRemovedEventResponse> responses = new ArrayList<MinterRemovedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            MinterRemovedEventResponse typedResponse = new MinterRemovedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.account = (String) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<MinterRemovedEventResponse> minterRemovedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, MinterRemovedEventResponse>() {
            @Override
            public MinterRemovedEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(MINTERREMOVED_EVENT, log);
                MinterRemovedEventResponse typedResponse = new MinterRemovedEventResponse();
                typedResponse.log = log;
                typedResponse.account = (String) eventValues.getIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<MinterRemovedEventResponse> minterRemovedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(MINTERREMOVED_EVENT));
        return minterRemovedEventFlowable(filter);
    }

    public List<RoleAdminChangedEventResponse> getRoleAdminChangedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(ROLEADMINCHANGED_EVENT, transactionReceipt);
        ArrayList<RoleAdminChangedEventResponse> responses = new ArrayList<RoleAdminChangedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            RoleAdminChangedEventResponse typedResponse = new RoleAdminChangedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.role = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.previousAdminRole = (byte[]) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.newAdminRole = (byte[]) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<RoleAdminChangedEventResponse> roleAdminChangedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, RoleAdminChangedEventResponse>() {
            @Override
            public RoleAdminChangedEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(ROLEADMINCHANGED_EVENT, log);
                RoleAdminChangedEventResponse typedResponse = new RoleAdminChangedEventResponse();
                typedResponse.log = log;
                typedResponse.role = (byte[]) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.previousAdminRole = (byte[]) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.newAdminRole = (byte[]) eventValues.getIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<RoleAdminChangedEventResponse> roleAdminChangedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ROLEADMINCHANGED_EVENT));
        return roleAdminChangedEventFlowable(filter);
    }

    public List<RoleGrantedEventResponse> getRoleGrantedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(ROLEGRANTED_EVENT, transactionReceipt);
        ArrayList<RoleGrantedEventResponse> responses = new ArrayList<RoleGrantedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            RoleGrantedEventResponse typedResponse = new RoleGrantedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.role = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.account = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.sender = (String) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<RoleGrantedEventResponse> roleGrantedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, RoleGrantedEventResponse>() {
            @Override
            public RoleGrantedEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(ROLEGRANTED_EVENT, log);
                RoleGrantedEventResponse typedResponse = new RoleGrantedEventResponse();
                typedResponse.log = log;
                typedResponse.role = (byte[]) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.account = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.sender = (String) eventValues.getIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<RoleGrantedEventResponse> roleGrantedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ROLEGRANTED_EVENT));
        return roleGrantedEventFlowable(filter);
    }

    public List<RoleRevokedEventResponse> getRoleRevokedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(ROLEREVOKED_EVENT, transactionReceipt);
        ArrayList<RoleRevokedEventResponse> responses = new ArrayList<RoleRevokedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            RoleRevokedEventResponse typedResponse = new RoleRevokedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.role = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.account = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.sender = (String) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<RoleRevokedEventResponse> roleRevokedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, RoleRevokedEventResponse>() {
            @Override
            public RoleRevokedEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(ROLEREVOKED_EVENT, log);
                RoleRevokedEventResponse typedResponse = new RoleRevokedEventResponse();
                typedResponse.log = log;
                typedResponse.role = (byte[]) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.account = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.sender = (String) eventValues.getIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<RoleRevokedEventResponse> roleRevokedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ROLEREVOKED_EVENT));
        return roleRevokedEventFlowable(filter);
    }

    public List<TitleEscrowDeployedEventResponse> getTitleEscrowDeployedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(TITLEESCROWDEPLOYED_EVENT, transactionReceipt);
        ArrayList<TitleEscrowDeployedEventResponse> responses = new ArrayList<TitleEscrowDeployedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            TitleEscrowDeployedEventResponse typedResponse = new TitleEscrowDeployedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.escrowAddress = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.tokenRegistry = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.beneficiary = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.holder = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<TitleEscrowDeployedEventResponse> titleEscrowDeployedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, TitleEscrowDeployedEventResponse>() {
            @Override
            public TitleEscrowDeployedEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(TITLEESCROWDEPLOYED_EVENT, log);
                TitleEscrowDeployedEventResponse typedResponse = new TitleEscrowDeployedEventResponse();
                typedResponse.log = log;
                typedResponse.escrowAddress = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.tokenRegistry = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.beneficiary = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.holder = (String) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<TitleEscrowDeployedEventResponse> titleEscrowDeployedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TITLEESCROWDEPLOYED_EVENT));
        return titleEscrowDeployedEventFlowable(filter);
    }

    public List<TokenBurntEventResponse> getTokenBurntEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(TOKENBURNT_EVENT, transactionReceipt);
        ArrayList<TokenBurntEventResponse> responses = new ArrayList<TokenBurntEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            TokenBurntEventResponse typedResponse = new TokenBurntEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<TokenBurntEventResponse> tokenBurntEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, TokenBurntEventResponse>() {
            @Override
            public TokenBurntEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(TOKENBURNT_EVENT, log);
                TokenBurntEventResponse typedResponse = new TokenBurntEventResponse();
                typedResponse.log = log;
                typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<TokenBurntEventResponse> tokenBurntEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TOKENBURNT_EVENT));
        return tokenBurntEventFlowable(filter);
    }

    public List<TokenReceivedEventResponse> getTokenReceivedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(TOKENRECEIVED_EVENT, transactionReceipt);
        ArrayList<TokenReceivedEventResponse> responses = new ArrayList<TokenReceivedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            TokenReceivedEventResponse typedResponse = new TokenReceivedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.operator = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.from = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
            typedResponse.data = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<TokenReceivedEventResponse> tokenReceivedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, TokenReceivedEventResponse>() {
            @Override
            public TokenReceivedEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(TOKENRECEIVED_EVENT, log);
                TokenReceivedEventResponse typedResponse = new TokenReceivedEventResponse();
                typedResponse.log = log;
                typedResponse.operator = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.from = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
                typedResponse.data = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<TokenReceivedEventResponse> tokenReceivedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TOKENRECEIVED_EVENT));
        return tokenReceivedEventFlowable(filter);
    }

    public List<TransferEventResponse> getTransferEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(TRANSFER_EVENT, transactionReceipt);
        ArrayList<TransferEventResponse> responses = new ArrayList<TransferEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            TransferEventResponse typedResponse = new TransferEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<TransferEventResponse> transferEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, TransferEventResponse>() {
            @Override
            public TransferEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(TRANSFER_EVENT, log);
                TransferEventResponse typedResponse = new TransferEventResponse();
                typedResponse.log = log;
                typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<TransferEventResponse> transferEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRANSFER_EVENT));
        return transferEventFlowable(filter);
    }

    public RemoteFunctionCall<byte[]> DEFAULT_ADMIN_ROLE() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_DEFAULT_ADMIN_ROLE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<byte[]> MINTER_ROLE() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_MINTER_ROLE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<TransactionReceipt> addMinter(String account) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ADDMINTER, 
                Arrays.<Type>asList(new Address(160, account)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> approve(String to, BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_APPROVE, 
                Arrays.<Type>asList(new Address(160, to),
                new Uint256(tokenId)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> balanceOf(String owner) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_BALANCEOF, 
                Arrays.<Type>asList(new Address(160, owner)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> deployNewTitleEscrow(String tokenRegistry, String beneficiary, String holder) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_DEPLOYNEWTITLEESCROW, 
                Arrays.<Type>asList(new Address(160, tokenRegistry),
                new Address(160, beneficiary),
                new Address(160, holder)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> destroyToken(BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_DESTROYTOKEN, 
                Arrays.<Type>asList(new Uint256(tokenId)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> getApproved(BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETAPPROVED, 
                Arrays.<Type>asList(new Uint256(tokenId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<byte[]> getRoleAdmin(byte[] role) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETROLEADMIN, 
                Arrays.<Type>asList(new Bytes32(role)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<String> getRoleMember(byte[] role, BigInteger index) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETROLEMEMBER, 
                Arrays.<Type>asList(new Bytes32(role),
                new Uint256(index)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> getRoleMemberCount(byte[] role) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETROLEMEMBERCOUNT, 
                Arrays.<Type>asList(new Bytes32(role)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> grantRole(byte[] role, String account) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_GRANTROLE, 
                Arrays.<Type>asList(new Bytes32(role),
                new Address(160, account)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> hasRole(byte[] role, String account) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_HASROLE, 
                Arrays.<Type>asList(new Bytes32(role),
                new Address(160, account)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<Boolean> isApprovedForAll(String owner, String operator) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ISAPPROVEDFORALL, 
                Arrays.<Type>asList(new Address(160, owner),
                new Address(160, operator)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<Boolean> isMinter(String account) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ISMINTER, 
                Arrays.<Type>asList(new Address(160, account)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> mint(String to, BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_MINT, 
                Arrays.<Type>asList(new Address(160, to),
                new Uint256(tokenId)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> mintTitle(String beneficiary, String holder, BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_MINTTITLE, 
                Arrays.<Type>asList(new Address(160, beneficiary),
                new Address(160, holder),
                new Uint256(tokenId)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> name() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_NAME, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> onERC721Received(String _operator, String _from, BigInteger _tokenId, byte[] _data) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ONERC721RECEIVED, 
                Arrays.<Type>asList(new Address(160, _operator),
                new Address(160, _from),
                new Uint256(_tokenId),
                new DynamicBytes(_data)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> ownerOf(BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_OWNEROF, 
                Arrays.<Type>asList(new Uint256(tokenId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> renounceMinter() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_RENOUNCEMINTER, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> renounceRole(byte[] role, String account) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_RENOUNCEROLE, 
                Arrays.<Type>asList(new Bytes32(role),
                new Address(160, account)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> restoreTitle(String beneficiary, String holder, BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_RESTORETITLE, 
                Arrays.<Type>asList(new Address(160, beneficiary),
                new Address(160, holder),
                new Uint256(tokenId)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> revokeRole(byte[] role, String account) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_REVOKEROLE, 
                Arrays.<Type>asList(new Bytes32(role),
                new Address(160, account)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> safeMint(String to, BigInteger tokenId, byte[] _data) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_safeMint, 
                Arrays.<Type>asList(new Address(160, to),
                new Uint256(tokenId),
                new DynamicBytes(_data)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> safeMint(String to, BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_safeMint, 
                Arrays.<Type>asList(new Address(160, to),
                new Uint256(tokenId)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> safeTransferFrom(String from, String to, BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_safeTransferFrom, 
                Arrays.<Type>asList(new Address(160, from),
                new Address(160, to),
                new Uint256(tokenId)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> safeTransferFrom(String from, String to, BigInteger tokenId, byte[] _data) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_safeTransferFrom, 
                Arrays.<Type>asList(new Address(160, from),
                new Address(160, to),
                new Uint256(tokenId),
                new DynamicBytes(_data)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setApprovalForAll(String operator, Boolean approved) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETAPPROVALFORALL, 
                Arrays.<Type>asList(new Address(160, operator),
                new Bool(approved)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> supportsInterface(byte[] interfaceId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_SUPPORTSINTERFACE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes4(interfaceId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<String> symbol() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_SYMBOL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> titleEscrowImplementation() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TITLEESCROWIMPLEMENTATION, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> tokenURI(BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TOKENURI, 
                Arrays.<Type>asList(new Uint256(tokenId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> transferFrom(String from, String to, BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TRANSFERFROM, 
                Arrays.<Type>asList(new Address(160, from),
                new Address(160, to),
                new Uint256(tokenId)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static TradeTrustERC721 load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new TradeTrustERC721(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static TradeTrustERC721 load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new TradeTrustERC721(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static TradeTrustERC721 load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new TradeTrustERC721(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static TradeTrustERC721 load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new TradeTrustERC721(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<TradeTrustERC721> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider, String name, String symbol) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new Utf8String(name),
                new Utf8String(symbol)));
        return deployRemoteCall(TradeTrustERC721.class, web3j, credentials, contractGasProvider, BINARY, encodedConstructor);
    }

    public static RemoteCall<TradeTrustERC721> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider, String name, String symbol) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new Utf8String(name),
                new Utf8String(symbol)));
        return deployRemoteCall(TradeTrustERC721.class, web3j, transactionManager, contractGasProvider, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<TradeTrustERC721> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, String name, String symbol) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new Utf8String(name),
                new Utf8String(symbol)));
        return deployRemoteCall(TradeTrustERC721.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<TradeTrustERC721> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, String name, String symbol) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new Utf8String(name),
                new Utf8String(symbol)));
        return deployRemoteCall(TradeTrustERC721.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public static class ApprovalEventResponse extends BaseEventResponse {
        public String owner;

        public String approved;

        public BigInteger tokenId;
    }

    public static class ApprovalForAllEventResponse extends BaseEventResponse {
        public String owner;

        public String operator;

        public Boolean approved;
    }

    public static class LogEventResponse extends BaseEventResponse {
        public String owner;
    }

    public static class MinterAddedEventResponse extends BaseEventResponse {
        public String account;
    }

    public static class MinterRemovedEventResponse extends BaseEventResponse {
        public String account;
    }

    public static class RoleAdminChangedEventResponse extends BaseEventResponse {
        public byte[] role;

        public byte[] previousAdminRole;

        public byte[] newAdminRole;
    }

    public static class RoleGrantedEventResponse extends BaseEventResponse {
        public byte[] role;

        public String account;

        public String sender;
    }

    public static class RoleRevokedEventResponse extends BaseEventResponse {
        public byte[] role;

        public String account;

        public String sender;
    }

    public static class TitleEscrowDeployedEventResponse extends BaseEventResponse {
        public String escrowAddress;

        public String tokenRegistry;

        public String beneficiary;

        public String holder;
    }

    public static class TokenBurntEventResponse extends BaseEventResponse {
        public BigInteger tokenId;
    }

    public static class TokenReceivedEventResponse extends BaseEventResponse {
        public String operator;

        public String from;

        public BigInteger tokenId;

        public byte[] data;
    }

    public static class TransferEventResponse extends BaseEventResponse {
        public String from;

        public String to;

        public BigInteger tokenId;
    }
}
